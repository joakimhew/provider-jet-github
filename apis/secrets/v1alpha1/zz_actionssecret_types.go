/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsSecretObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ActionsSecretParameters struct {

	// +kubebuilder:validation:Optional
	EncryptedValueSecretRef *v1.SecretKeySelector `json:"encryptedValueSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PlaintextValueSecretRef *v1.SecretKeySelector `json:"plaintextValueSecretRef,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/joakimhew/provider-jet-github/apis/repository/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

// ActionsSecretSpec defines the desired state of ActionsSecret
type ActionsSecretSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActionsSecretParameters `json:"forProvider"`
}

// ActionsSecretStatus defines the observed state of ActionsSecret.
type ActionsSecretStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActionsSecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ActionsSecret is the Schema for the ActionsSecrets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type ActionsSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActionsSecretSpec   `json:"spec"`
	Status            ActionsSecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActionsSecretList contains a list of ActionsSecrets
type ActionsSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActionsSecret `json:"items"`
}

// Repository type metadata.
var (
	ActionsSecret_Kind             = "ActionsSecret"
	ActionsSecret_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActionsSecret_Kind}.String()
	ActionsSecret_KindAPIVersion   = ActionsSecret_Kind + "." + CRDGroupVersion.String()
	ActionsSecret_GroupVersionKind = CRDGroupVersion.WithKind(ActionsSecret_Kind)
)

func init() {
	SchemeBuilder.Register(&ActionsSecret{}, &ActionsSecretList{})
}
