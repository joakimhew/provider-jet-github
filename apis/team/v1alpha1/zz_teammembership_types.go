/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamMembershipObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TeamMembershipParameters struct {

	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// +crossplane:generate:reference:type=github.com/joakimhew/provider-jet-github/apis/team/v1alpha1.Team
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// TeamMembershipSpec defines the desired state of TeamMembership
type TeamMembershipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamMembershipParameters `json:"forProvider"`
}

// TeamMembershipStatus defines the observed state of TeamMembership.
type TeamMembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TeamMembership is the Schema for the TeamMemberships API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type TeamMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TeamMembershipSpec   `json:"spec"`
	Status            TeamMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamMembershipList contains a list of TeamMemberships
type TeamMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamMembership `json:"items"`
}

// Repository type metadata.
var (
	TeamMembership_Kind             = "TeamMembership"
	TeamMembership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamMembership_Kind}.String()
	TeamMembership_KindAPIVersion   = TeamMembership_Kind + "." + CRDGroupVersion.String()
	TeamMembership_GroupVersionKind = CRDGroupVersion.WithKind(TeamMembership_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamMembership{}, &TeamMembershipList{})
}
