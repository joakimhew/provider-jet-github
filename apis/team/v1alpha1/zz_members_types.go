/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MembersMembersObservation struct {
}

type MembersMembersParameters struct {

	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type MembersObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MembersParameters struct {

	// +kubebuilder:validation:Required
	Members []MembersMembersParameters `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	TeamID *string `json:"teamId" tf:"team_id,omitempty"`
}

// MembersSpec defines the desired state of Members
type MembersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MembersParameters `json:"forProvider"`
}

// MembersStatus defines the observed state of Members.
type MembersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MembersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Members is the Schema for the Memberss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type Members struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MembersSpec   `json:"spec"`
	Status            MembersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MembersList contains a list of Memberss
type MembersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Members `json:"items"`
}

// Repository type metadata.
var (
	Members_Kind             = "Members"
	Members_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Members_Kind}.String()
	Members_KindAPIVersion   = Members_Kind + "." + CRDGroupVersion.String()
	Members_GroupVersionKind = CRDGroupVersion.WithKind(Members_Kind)
)

func init() {
	SchemeBuilder.Register(&Members{}, &MembersList{})
}
