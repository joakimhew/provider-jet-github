/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MembersObservation struct {
}

type MembersParameters struct {

	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type TeamMembersObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TeamMembersParameters struct {

	// +kubebuilder:validation:Required
	Members []MembersParameters `json:"members" tf:"members,omitempty"`

	// +crossplane:generate:reference:type=github.com/joakimhew/provider-jet-github/apis/team/v1alpha1.Team
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

// TeamMembersSpec defines the desired state of TeamMembers
type TeamMembersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamMembersParameters `json:"forProvider"`
}

// TeamMembersStatus defines the observed state of TeamMembers.
type TeamMembersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamMembersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TeamMembers is the Schema for the TeamMemberss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type TeamMembers struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TeamMembersSpec   `json:"spec"`
	Status            TeamMembersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamMembersList contains a list of TeamMemberss
type TeamMembersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamMembers `json:"items"`
}

// Repository type metadata.
var (
	TeamMembers_Kind             = "TeamMembers"
	TeamMembers_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamMembers_Kind}.String()
	TeamMembers_KindAPIVersion   = TeamMembers_Kind + "." + CRDGroupVersion.String()
	TeamMembers_GroupVersionKind = CRDGroupVersion.WithKind(TeamMembers_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamMembers{}, &TeamMembersList{})
}
