/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamRepositoryObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TeamRepositoryParameters struct {

	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// +crossplane:generate:reference:type=github.com/joakimhew/provider-jet-github/apis/repository/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// ID or slug of team
	// +crossplane:generate:reference:type=github.com/joakimhew/provider-jet-github/apis/team/v1alpha1.Team
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

// TeamRepositorySpec defines the desired state of TeamRepository
type TeamRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamRepositoryParameters `json:"forProvider"`
}

// TeamRepositoryStatus defines the observed state of TeamRepository.
type TeamRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TeamRepository is the Schema for the TeamRepositorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type TeamRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TeamRepositorySpec   `json:"spec"`
	Status            TeamRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamRepositoryList contains a list of TeamRepositorys
type TeamRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamRepository `json:"items"`
}

// Repository type metadata.
var (
	TeamRepository_Kind             = "TeamRepository"
	TeamRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamRepository_Kind}.String()
	TeamRepository_KindAPIVersion   = TeamRepository_Kind + "." + CRDGroupVersion.String()
	TeamRepository_GroupVersionKind = CRDGroupVersion.WithKind(TeamRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamRepository{}, &TeamRepositoryList{})
}
